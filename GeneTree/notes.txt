//this files contains some of the ongoing notes.  things in here should be cleared out and made into Issues or just implemented.

output an initial status to make it clear that the program is running

take nodes with a large NO CLASS and see if they can be split or reclassed better.  especially bad when all are NO CLASS but still might be good

really need to find a way to go after the small side of the classifier: group 0 has an awful success rate

is it possible to build a second layer of trees for anything that is classed as 0 on the first round?  try to break up the split better

add the missing count to the output summary

use a weighted selector to choose which trees to pick nodes from

create some synthetic data in the program so that is it easier to determine the results of a given run

add the probability value to the tree output at the end

changes are better suited to go lower in the tree as the generation progresses (much hard to make a good move at the top of tree?)

stop making new trees at some point?  or have a means of letting the randomness in to the next round... then see if these are ever used

add the score and cv score to the output file name

provide a means of doing things with multiple cores

do random trees get better if they are generated with test optimization?

need to capture those data points which are not getting classified and build a tree that works on those

need to use some validation measure to help grow the trees... avoid overfitting when using NO CLASS

review some of the trees created to see how deep/overfit they are

create a "ReplaceNodeWithAnotherNode" to provide a single logic for moving nodes around on a tree
 - needs to handle the case when the node to move is the root

is it possible to use a score for the node that is different than simple counts? something that considers the TERM TO that was called?

make Random a singelton of some class to avoid passing around so many references.

is it possible to pick different trees from the final populatiojn which are different? (save trouble of running tons of times)

notes for next commit:
 - UI parts dock to the form so that it can be maximized
 - removed some of the matrix output to (hopefully) improve speed
 - added List for data that is not included in the testing.  can be used for out of bag validation samples
 - avoid creating results directory until it is needed
 - removed the MissingTreeTest and the CategorySubsetTests which were in the Factory method
 - added references for embedding Chrome in the application... will be used to get access to d3 for visualization
 - pre compute the data loader columns to hopefully speed things up
 - using range for double calculations (avoid subtraction several times)
 - removed the bounding on the correct class when calculating a log loss
 - removed results reference from TraverseData, now using the root node to get final result